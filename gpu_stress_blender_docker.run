
#!/bin/bash
set -e
echo "🚀 Starte Blender-HIP-GPU-Stresstest in Docker..."

# Docker installieren, falls nicht vorhanden
if ! command -v docker &>/dev/null; then
  echo "📦 Docker wird installiert..."
  sudo apt update && sudo apt install -y docker.io
  sudo systemctl enable docker
  sudo systemctl start docker
fi

# Blender-HIP Docker Image holen
IMAGE=karli000/blender-hip:4.5
echo "🐳 Lade Container-Image: $IMAGE"
docker pull "$IMAGE"

# Szene erzeugen & rendern im Container
RES_X=3840
RES_Y=2160
FRAMES=20
SAMPLES=1024
OUTPUT=/tmp/docker_gpu_stress_####

START=$(date +%s)
echo "🔥 Starte Rendering im Container..."

docker run --rm --device=/dev/dri --group-add video \
  -v /tmp:/tmp \
  "$IMAGE" blender -b -P - <<EOF
import bpy

bpy.ops.wm.read_factory_settings(use_empty=True)

# Kamera
cam = bpy.data.cameras.new("Cam")
cam_obj = bpy.data.objects.new("Cam", cam)
bpy.context.collection.objects.link(cam_obj)
cam_obj.location = (0, -6, 3)
cam_obj.rotation_euler = (1.2, 0, 0)
bpy.context.scene.camera = cam_obj

# Licht
light = bpy.data.lights.new("Licht", type='AREA')
light.energy = 3000
light_obj = bpy.data.objects.new("Licht", light)
light_obj.location = (4, -4, 6)
bpy.context.collection.objects.link(light_obj)

# Shader-Kugel
bpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 1))
sphere = bpy.context.active_object
mat = bpy.data.materials.new("Glanz")
mat.use_nodes = True
bsdf = mat.node_tree.nodes["Principled BSDF"]
bsdf.inputs["Metallic"].default_value = 0.9
bsdf.inputs["Roughness"].default_value = 0.1
sphere.data.materials.append(mat)

# Boden
bpy.ops.mesh.primitive_plane_add(size=10, location=(0, 0, 0))
plane = bpy.context.active_object
mat2 = bpy.data.materials.new("Reflex")
mat2.use_nodes = True
bsdf2 = mat2.node_tree.nodes["Principled BSDF"]
bsdf2.inputs["Metallic"].default_value = 0.3
bsdf2.inputs["Roughness"].default_value = 0.05
plane.data.materials.append(mat2)

# Rendering
scene = bpy.context.scene
scene.render.engine = 'CYCLES'
scene.cycles.device = 'GPU'
scene.render.resolution_x = $RES_X
scene.render.resolution_y = $RES_Y
scene.cycles.samples = $SAMPLES
scene.frame_start = 1
scene.frame_end = $FRAMES
scene.render.image_settings.file_format = 'PNG'
scene.render.filepath = "$OUTPUT"
bpy.ops.render.render(animation=True)
EOF

DURATION=$(( $(date +%s) - $START ))
echo "✅ Test abgeschlossen in ${DURATION}s (~$((DURATION/60)) min)"
echo "📁 Bilder gespeichert in /tmp/docker_gpu_stress_0001.png bis 0020.png"
