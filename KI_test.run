#!/bin/bash
LOG="KI_test.log"
echo "🧪 ROCm Komponententest mit venv gestartet: $(date)" > "$LOG"

# 🧠 venv einrichten + Pakete installieren
python3 -m venv ~/rocm_venv
source ~/rocm_venv/bin/activate
~/rocm_venv/bin/pip install --upgrade pip notebook tensorflow matplotlib pandas

# 🚀 HIP Test
echo -e "\n🚀 HIP Test..." | tee -a "$LOG"
hipcc --version &>/dev/null && HIP_STATUS="✅ verfügbar" || HIP_STATUS="❌ fehlt"

# 📘 Jupyter Test
echo -e "\n📘 Jupyter Test..." | tee -a "$LOG"
~/rocm_venv/bin/python -c "import notebook" &>/dev/null && JUPYTER_STATUS="✅ verfügbar" || JUPYTER_STATUS="❌ fehlt"

# 🎨 Blender Test
echo -e "\n🎨 Blender Test..." | tee -a "$LOG"
blender --version &>/dev/null && BLENDER_STATUS="✅ verfügbar" || BLENDER_STATUS="❌ fehlt"

# 🧠 TensorFlow Test
echo -e "\n🧠 TensorFlow Test..." | tee -a "$LOG"
~/rocm_venv/bin/python -c "import tensorflow" &>/dev/null && TENSORFLOW_STATUS="✅ verfügbar" || TENSORFLOW_STATUS="❌ fehlt"

# 📊 Ergebnistabelle
echo -e "\n📊 Komponententabelle:" | tee -a "$LOG"
TABLE=$(cat <<TAB
| Komponente   | Funktionstest         | Status             |
|--------------|-----------------------|--------------------|
| HIP          | hipcc --version       | ${HIP_STATUS}      |
| Jupyter      | Import im venv        | ${JUPYTER_STATUS}  |
| Blender      | blender --version     | ${BLENDER_STATUS}  |
| TensorFlow   | Import im venv        | ${TENSORFLOW_STATUS}|
TAB
)
echo "$TABLE" | tee -a "$LOG"
echo -e "\n✅ Test abgeschlossen! Ergebnisse in $LOG"

# 📘 Jupyter-Notebook zur Auswertung erzeugen
cat <<EOF > KI_log_analyzer.ipynb
{
 "cells": [
  {
   "cell_type": "code",
   "metadata": {},
   "source": [
    "import pandas as pd\\n",
    "import re\\n",
    "import matplotlib.pyplot as plt\\n",
    "log_path = \\"KI_test.log\\"\\n",
    "with open(log_path, \\"r\\") as file:\\n",
    "    log = file.read()\\n",
    "table_match = re.search(r\\"\\\\| Komponente.+?\\\\| TensorFlow.+?\\\\|\\", log, re.DOTALL)\\n",
    "table_text = table_match.group(0) if table_match else \\"\\"\\n",
    "lines = [line.strip() for line in table_text.split(\\\"\\\\n\\\") if line.strip().startswith(\\\"|\\\")]\\n",
    "rows = [line.strip(\\\"|\\\").split(\\\"|\\\") for line in lines[2:]]\\n",
    "df = pd.DataFrame(rows, columns=[\\"Komponente\\", \\"Funktionstest\\", \\"Status\\"])\\n",
    "df = df.applymap(str.strip)\\n",
    "df[\\"OK\\"] = df[\\"Status\\"].apply(lambda s: 1 if \\"✅\\" in s else 0)\\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {},
   "source": [
    "plt.figure(figsize=(6,4))\\n",
    "plt.bar(df[\\"Komponente\\"], df[\\"OK\\"], color=[\\"green\\" if ok else \\"red\\" for ok in df[\\"OK\\"]])\\n",
    "plt.ylim(0, 1.2)\\n",
    "plt.yticks([0, 1], [\\"❌ Fehlend\\", \\"✅ Verfügbar\\"])\\n",
    "plt.title(\\"🧠 ROCm KI-Komponententest\\")\\n",
    "plt.grid(axis=\\"y\\", linestyle=\\"--\\", alpha=0.5)\\n",
    "plt.tight_layout()\\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": { "display_name": "Python 3", "name": "python3" }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
EOF

# 🚀 Notebook automatisch starten
nohup ~/rocm_venv/bin/jupyter notebook KI_log_analyzer.ipynb &

echo "📊 Notebook gestartet – du kannst deine Testergebnisse jetzt grafisch analysieren!"
