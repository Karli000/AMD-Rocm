#!/bin/bash
LOG="rocm_setup.log"
echo "üöÄ ROCm Setup gestartet: $(date)" > "$LOG"

# 1Ô∏è‚É£ GPU-Erkennung
GPU=$(lspci | grep VGA | grep -i AMD)
if [[ -z "$GPU" ]]; then
  echo "‚ùå Keine AMD-GPU erkannt. Abbruch." | tee -a "$LOG"
  exit 1
else
  echo "‚úÖ GPU erkannt: $GPU" | tee -a "$LOG"
fi

# 2Ô∏è‚É£ Kernel-Kompatibilit√§t pr√ºfen
KERNEL=$(uname -r | cut -d '-' -f1)
if awk "BEGIN{exit !($KERNEL >= 5.13 && $KERNEL <= 6.14)}"; then
  echo "‚úÖ Kernel-Version ($KERNEL) ist kompatibel mit ROCm" | tee -a "$LOG"
else
  echo "‚ùå Inkompatibler Kernel ($KERNEL). Abbruch." | tee -a "$LOG"
  exit 1
fi

# 3Ô∏è‚É£ DKMS pr√ºfen
if ! dpkg -s dkms &> /dev/null; then
  echo "üì¶ Installiere DKMS..." | tee -a "$LOG"
  sudo apt install -y dkms
else
  echo "‚úÖ DKMS ist installiert" | tee -a "$LOG"
fi

# 4Ô∏è‚É£ Alte ROCm-Treiber entfernen
sudo apt purge -y rocm-dkms rock-dkms amdgpu-pro amdgpu
sudo rm -f /etc/apt/sources.list.d/rocm.list
sudo apt autoremove -y

# 5Ô∏è‚É£ Aktuelles ROCm Repo hinzuf√ºgen
echo "üîó F√ºge aktuelles ROCm-Repo hinzu..." | tee -a "$LOG"
echo "deb [arch=amd64] https://repo.radeon.com/rocm/apt/5.7/ ubuntu main" | sudo tee /etc/apt/sources.list.d/rocm.list
wget -qO - https://repo.radeon.com/rocm/rocm.gpg.key | sudo apt-key add -
sudo apt update

# 6Ô∏è‚É£ Pakete installieren
sudo apt install -y rocm-dev rock-dkms hipcc clinfo rocminfo

# 7Ô∏è‚É£ Module laden
sudo modprobe amdgpu
sudo modprobe rock

# 8Ô∏è‚É£ Umgebungsvariablen setzen + HSA Override
export ROCM_PATH=/opt/rocm
export PATH=$ROCM_PATH/bin:$PATH
export LD_LIBRARY_PATH=$ROCM_PATH/lib:$ROCM_PATH/lib64:$LD_LIBRARY_PATH
export DEVICE_LIB_PATH=$ROCM_PATH/lib/amdgcn/bitcode
export HSA_OVERRIDE_GFX_VERSION=10.3.0

if ! grep -q "ROCm Setup" ~/.bashrc; then
  echo -e "\n# ROCm Setup" >> ~/.bashrc
  echo "export ROCM_PATH=/opt/rocm" >> ~/.bashrc
  echo "export PATH=\$ROCM_PATH/bin:\$PATH" >> ~/.bashrc
  echo "export LD_LIBRARY_PATH=\$ROCM_PATH/lib:\$ROCM_PATH/lib64:\$LD_LIBRARY_PATH" >> ~/.bashrc
  echo "export DEVICE_LIB_PATH=\$ROCM_PATH/lib/amdgcn/bitcode" >> ~/.bashrc
  echo "export HSA_OVERRIDE_GFX_VERSION=10.3.0" >> ~/.bashrc
fi

# 9Ô∏è‚É£ OpenCL-Test
clinfo | tee -a "$LOG"

# üîü HIP Vektoraddition
mkdir -p ~/hip_test && cd ~/hip_test
cat << 'EOF' > vector_add.cpp
#include <hip/hip_runtime.h>
#include <iostream>
#define N 100
__global__ void vector_add(const int* A, const int* B, int* C) {
  int i = threadIdx.x;
  C[i] = A[i] + B[i];
}
int main() {
  int A[N], B[N], C[N];
  for (int i = 0; i < N; i++) { A[i] = i; B[i] = i * 2; }
  int *d_A, *d_B, *d_C;
  hipMalloc(&d_A, N * sizeof(int)); hipMalloc(&d_B, N * sizeof(int)); hipMalloc(&d_C, N * sizeof(int));
  hipMemcpy(d_A, A, N * sizeof(int), hipMemcpyHostToDevice);
  hipMemcpy(d_B, B, N * sizeof(int), hipMemcpyHostToDevice);
  hipLaunchKernelGGL(vector_add, dim3(1), dim3(N), 0, 0, d_A, d_B, d_C);
  hipMemcpy(C, d_C, N * sizeof(int), hipMemcpyDeviceToHost);
  for (int i = 0; i < 5; i++) std::cout << A[i] << " + " << B[i] << " = " << C[i] << std::endl;
  hipFree(d_A); hipFree(d_B); hipFree(d_C);
  return 0;
}
EOF
hipcc vector_add.cpp -o vector_add_test
./vector_add_test | tee -a "$LOG"
cd ~ && rm -rf ~/hip_test

# üîÅ HIP FLOPs-Benchmark
mkdir -p ~/hip_benchmark && cd ~/hip_benchmark
cat << 'EOF' > hip_benchmark.cpp
#include <hip/hip_runtime.h>
#include <iostream>
#include <chrono>
#define N 1000000
__global__ void flops_test(float* a, float* b, float* c) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < N) c[i] = a[i] * b[i] + b[i] * a[i];
}
int main() {
  float *a, *b, *c, *d_a, *d_b, *d_c;
  a = new float[N]; b = new float[N]; c = new float[N];
  for (int i = 0; i < N; i++) { a[i] = 1.1f; b[i] = 2.2f; }
  hipMalloc(&d_a, N * sizeof(float)); hipMalloc(&d_b, N * sizeof(float)); hipMalloc(&d_c, N * sizeof(float));
  hipMemcpy(d_a, a, N * sizeof(float), hipMemcpyHostToDevice);
  hipMemcpy(d_b, b, N * sizeof(float), hipMemcpyHostToDevice);
  auto start = std::chrono::high_resolution_clock::now();
  flops_test<<<(N+255)/256, 256>>>(d_a, d_b, d_c); hipDeviceSynchronize();
  auto end = std::chrono::high_resolution_clock::now();
  std::chrono::duration<double> elapsed = end - start;
  double flops = (double)(N * 2) / elapsed.count();
  std::cout << "üí• FLOPs/s: " << flops / 1e9 << " GFLOPs" << std::endl;
  hipFree(d_a); hipFree(d_b); hipFree(d_c);
  delete[] a; delete[] b; delete[] c;
  return 0;
}
EOF
hipcc hip_benchmark.cpp -o hip_benchmark
./hip_benchmark | tee -a "$LOG"
cd ~ && rm -rf ~/hip_benchmark

# üìä Zusammenfassung
echo -e "\nüìä ROCm Installations√ºbersicht:" | tee -a "$LOG"
echo "| Schritt | Beschreibung                                   | Status             |" | tee -a "$LOG"
echo "|---------|------------------------------------------------|--------------------|" | tee -a "$LOG"
echo "| 1Ô∏è‚É£      | GPU erkannt                                     | ‚úÖ $GPU             |" | tee -a "$LOG"
echo "| 2Ô∏è‚É£      | Kernel gepr√ºft (Version: $KERNEL)               | ‚úÖ kompatibel       |" | tee -a "$LOG"
echo "| 3Ô∏è‚É£      | DKMS installiert                                | ‚úÖ OK               |" | tee -a "$LOG"
echo "| 4Ô∏è‚É£      | Alte Treiber entfernt                           | ‚úÖ System bereinigt |" | tee -a "$LOG"
echo "| 5Ô∏è‚É£      | ROCm & rock-dkms installiert                    | ‚úÖ Pakete bereit    |" | tee -a "$LOG"
echo "| 6Ô∏è‚É£      | Module geladen (`amdgpu`, `rock`)               | ‚úÖ aktiviert        |" | tee -a "$LOG"
echo "| 7Ô∏è‚É£      | Umgebungsvariablen & HSA override gesetzt       | ‚úÖ gesetzt          |
